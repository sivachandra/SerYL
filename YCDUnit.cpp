#include "YCDUnit.h"

#include "YCDLoader.h"

#include "llvm/Support/MemoryBuffer.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/Support/YAMLParser.h"

#include <cstdlib>

namespace llvm {

std::unique_ptr<YCDUnit> YCDUnit::load(
    const std::string &Filename,
    const std::vector<std::string> &IncludeDirs) {
  YCDLoader Loader;
  return Loader.load(Filename, IncludeDirs);
}

int YCDUnit::writeCpp(const std::string &Basename) const {
  std::string CppHeader = Basename + ".h";
  std::error_code EC;
  raw_fd_ostream HS(CppHeader, EC);
  if (EC.value() != 0) {
    errs() << "Unable to open " << CppHeader << " for writing.\n";
    return 1;
  }

  HS << "// File generated by SerYL from " << InputFile << ".\n";
  HS << "// Do no edit.\n";

  HS << "\n";

  // TODO: Add includes for the imported files.

  HS << "#include <string>\n";
  HS << "#include <vector>\n";

  HS << "\n";

  for (const std::string &Part : PackageName) {
    HS << "namespace " << Part << " {\n";
  }

  HS << "\n";  

  for (const YCDClass &Class : Classes) {
    Class.writeCppDefinition(HS);
    HS << "\n";
  }

  HS << "\n";

  for (const std::string &Part: PackageName) {
    HS << "} // namespace " << Part << "\n";
  }

  return 0;
}

} // namespace llvm
